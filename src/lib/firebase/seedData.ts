
'use server';

import { db } from '@/lib/firebase/firebase';
import { collection, doc, writeBatch, serverTimestamp, Timestamp } from 'firebase/firestore';
import type { UserProfile, Course, Grade, AttendanceRecord } from '@/types';

const DUMMY_STUDENT_UIDS = {
  alice: 'dummy-student-alice',
  bob: 'dummy-student-bob',
  charlie: 'dummy-student-charlie',
  diana: 'dummy-student-diana',
};

const DUMMY_TEACHER_UIDS = {
  dumbledore: 'dummy-teacher-dumbledore',
  mcgonagall: 'dummy-teacher-mcgonagall',
};

// Ensure these UIDs correspond to actual Auth users if you want them to be able to log in.
// Or create them in Firebase Auth.
const dummyStudentProfiles: UserProfile[] = [
  {
    uid: DUMMY_STUDENT_UIDS.alice,
    email: 'alice@example.com',
    displayName: 'Alice Wonderland',
    role: 'student',
    photoURL: `https://placehold.co/100x100.png?text=AW`,
  },
  {
    uid: DUMMY_STUDENT_UIDS.bob,
    email: 'bob@example.com',
    displayName: 'Bob The Builder',
    role: 'student',
    photoURL: `https://placehold.co/100x100.png?text=BB`,
  },
  {
    uid: DUMMY_STUDENT_UIDS.charlie,
    email: 'charlie@example.com',
    displayName: 'Charlie Brown',
    role: 'student',
    photoURL: `https://placehold.co/100x100.png?text=CB`,
  },
  {
    uid: DUMMY_STUDENT_UIDS.diana,
    email: 'diana@example.com',
    displayName: 'Diana Prince',
    role: 'student',
    photoURL: `https://placehold.co/100x100.png?text=DP`,
  },
];

// Dummy teacher profiles (optional, if you want to ensure they exist for course assignment)
// You'd typically create these through your app's user management or Firebase Console
const dummyTeacherProfiles: UserProfile[] = [
  {
    uid: DUMMY_TEACHER_UIDS.dumbledore,
    email: 'dumbledore@example.com',
    displayName: 'Albus Dumbledore',
    role: 'teacher',
    photoURL: `https://placehold.co/100x100.png?text=AD`,
  },
  {
    uid: DUMMY_TEACHER_UIDS.mcgonagall,
    email: 'mcgonagall@example.com',
    displayName: 'Minerva McGonagall',
    role: 'teacher',
    photoURL: `https://placehold.co/100x100.png?text=MM`,
  },
];


// Course IDs will be auto-generated by Firestore, but we need to capture them for grades/attendance
let course1Id: string, course2Id: string, course3Id: string;

const getDummyCourses = (): Omit<Course, 'id'>[] => [
  {
    name: 'Introduction to Programming',
    code: 'CS101',
    description: 'Fundamentals of programming using Python.',
    teacherId: DUMMY_TEACHER_UIDS.dumbledore,
    studentIds: [DUMMY_STUDENT_UIDS.alice, DUMMY_STUDENT_UIDS.charlie],
    // createdBy: adminUID, // Should be set by the admin triggering seed
    // createdAt: serverTimestamp(),
  },
  {
    name: 'Advanced Potion Making',
    code: 'CHEM202',
    description: 'Brewing complex concoctions and understanding their magical properties.',
    teacherId: DUMMY_TEACHER_UIDS.mcgonagall,
    studentIds: [DUMMY_STUDENT_UIDS.bob, DUMMY_STUDENT_UIDS.diana],
    // createdBy: adminUID,
    // createdAt: serverTimestamp(),
  },
  {
    name: 'History of Ancient Civilizations',
    code: 'HIST301',
    description: 'A survey of major ancient civilizations and their impact on the modern world.',
    teacherId: DUMMY_TEACHER_UIDS.dumbledore,
    studentIds: [DUMMY_STUDENT_UIDS.alice, DUMMY_STUDENT_UIDS.bob, DUMMY_STUDENT_UIDS.diana],
    // createdBy: adminUID,
    // createdAt: serverTimestamp(),
  },
];

const getDummyGrades = (): Omit<Grade, 'id'>[] => [
  // Grades for CS101
  { studentId: DUMMY_STUDENT_UIDS.alice, courseId: course1Id, gradeValue: 'A', comments: 'Excellent work!', term: 'Fall 2024' },
  { studentId: DUMMY_STUDENT_UIDS.charlie, courseId: course1Id, gradeValue: 'B+', comments: 'Good effort, needs improvement in labs.', term: 'Fall 2024' },
  // Grades for CHEM202
  { studentId: DUMMY_STUDENT_UIDS.bob, courseId: course2Id, gradeValue: 'A-', comments: 'Very proficient in practicals.', term: 'Fall 2024' },
  { studentId: DUMMY_STUDENT_UIDS.diana, courseId: course2Id, gradeValue: 'B', comments: 'Solid understanding of theory.', term: 'Fall 2024' },
  // Grades for HIST301
  { studentId: DUMMY_STUDENT_UIDS.alice, courseId: course3Id, gradeValue: 'A', comments: 'Insightful essays.', term: 'Fall 2024' },
  { studentId: DUMMY_STUDENT_UIDS.bob, courseId: course3Id, gradeValue: 'C+', comments: 'Needs to participate more in discussions.', term: 'Fall 2024' },
  { studentId: DUMMY_STUDENT_UIDS.diana, courseId: course3Id, gradeValue: 'A-', comments: 'Excellent presentation skills.', term: 'Fall 2024' },
];

const getDummyAttendance = (): Omit<AttendanceRecord, 'id'>[] => {
  const records: Omit<AttendanceRecord, 'id'>[] = [];
  const today = new Date();
  const dates = [
    new Date(today.setDate(today.getDate() - 5)).toISOString().split('T')[0],
    new Date(today.setDate(today.getDate() - 3)).toISOString().split('T')[0],
    new Date(today.setDate(today.getDate() - 1)).toISOString().split('T')[0],
  ];

  const studentCourseMap = [
    { studentId: DUMMY_STUDENT_UIDS.alice, courseId: course1Id },
    { studentId: DUMMY_STUDENT_UIDS.charlie, courseId: course1Id },
    { studentId: DUMMY_STUDENT_UIDS.bob, courseId: course2Id },
    { studentId: DUMMY_STUDENT_UIDS.diana, courseId: course2Id },
    { studentId: DUMMY_STUDENT_UIDS.alice, courseId: course3Id },
    { studentId: DUMMY_STUDENT_UIDS.bob, courseId: course3Id },
    { studentId: DUMMY_STUDENT_UIDS.diana, courseId: course3Id },
  ];

  const statuses: ('present' | 'absent' | 'late')[] = ['present', 'absent', 'late'];

  studentCourseMap.forEach(sc => {
    if (!sc.courseId) return; // Skip if courseId is not yet defined
    dates.forEach(date => {
      records.push({
        studentId: sc.studentId,
        courseId: sc.courseId,
        date: date,
        status: statuses[Math.floor(Math.random() * statuses.length)],
        notes: Math.random() > 0.7 ? 'Had a slight cold.' : undefined,
      });
    });
  });
  return records;
};

export async function seedFirestoreData(adminUID: string) {
  const batch = writeBatch(db);

  // Seed Student UserProfiles
  dummyStudentProfiles.forEach(profile => {
    const userDocRef = doc(db, 'users', profile.uid);
    batch.set(userDocRef, profile);
  });
  // Seed Teacher UserProfiles (optional, useful if they don't exist)
  dummyTeacherProfiles.forEach(profile => {
    if (profile.uid) { // Check if UID is defined
        const userDocRef = doc(db, 'users', profile.uid);
        batch.set(userDocRef, profile);
    }
  });

  // Seed Courses and capture their IDs
  const coursesColRef = collection(db, 'courses');
  const coursesData = getDummyCourses();
  
  const course1Data = {...coursesData[0], createdBy: adminUID, createdAt: serverTimestamp()};
  const course1Ref = doc(coursesColRef);
  course1Id = course1Ref.id;
  batch.set(course1Ref, {...course1Data, studentIds: course1Data.studentIds || []});

  const course2Data = {...coursesData[1], createdBy: adminUID, createdAt: serverTimestamp()};
  const course2Ref = doc(coursesColRef);
  course2Id = course2Ref.id;
  batch.set(course2Ref, {...course2Data, studentIds: course2Data.studentIds || []});
  
  const course3Data = {...coursesData[2], createdBy: adminUID, createdAt: serverTimestamp()};
  const course3Ref = doc(coursesColRef);
  course3Id = course3Ref.id;
  batch.set(course3Ref, {...course3Data, studentIds: course3Data.studentIds || []});

  await batch.commit(); // Commit student profiles and courses first to get course IDs

  // New batch for grades and attendance, now that we have course IDs
  const batch2 = writeBatch(db);

  // Seed Grades
  if (course1Id && course2Id && course3Id) {
    const gradesData = getDummyGrades(); // This function now uses the captured course IDs
    gradesData.forEach(grade => {
      if (grade.courseId) { // Ensure courseId is valid before creating ref
        const gradeDocRef = doc(collection(db, 'grades'));
        batch2.set(gradeDocRef, grade);
      }
    });

    // Seed Attendance
    const attendanceData = getDummyAttendance(); // This function also uses captured course IDs
    attendanceData.forEach(att => {
      if(att.courseId) { // Ensure courseId is valid
        const attDocRef = doc(collection(db, 'attendance'));
        batch2.set(attDocRef, att);
      }
    });
  } else {
    console.error("Course IDs were not properly set, skipping grades and attendance.");
    throw new Error("Failed to create courses, so grades and attendance cannot be seeded.");
  }

  await batch2.commit();
}
