
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle, CardDescription as UiCardDescription } from "@/components/ui/card";
import type { Course } from "@/types";
import { useRouter } from "next/navigation";
import { Loader2, BookMarked } from "lucide-react";

// Schema for course creation/editing
// id is auto-generated by Firestore, studentIds and teacherId might be handled separately or later
const courseFormSchema = z.object({
  name: z.string().min(3, "Course name must be at least 3 characters long."),
  code: z.string().min(3, "Course code must be at least 3 characters long.").max(10, "Course code cannot exceed 10 characters."),
  description: z.string().optional(),
  // teacherId: z.string().optional(), // For future: dropdown to select teacher
});

type CourseFormValues = z.infer<typeof courseFormSchema>;

interface CourseFormProps {
  course?: Partial<Course>; // For editing existing course
  onSave: (data: CourseFormValues) => Promise<void>;
  isSubmitting?: boolean;
}

export function CourseForm({ course, onSave, isSubmitting = false }: CourseFormProps) {
  const router = useRouter();

  const form = useForm<CourseFormValues>({
    resolver: zodResolver(courseFormSchema),
    defaultValues: {
      name: course?.name || "",
      code: course?.code || "",
      description: course?.description || "",
      // teacherId: course?.teacherId || "",
    },
  });

  const handleSubmit = async (data: CourseFormValues) => {
    await onSave(data);
  };

  return (
    <Card className="w-full max-w-2xl mx-auto shadow-xl">
      <CardHeader>
        <CardTitle className="font-headline text-2xl flex items-center gap-2">
          <BookMarked className="h-6 w-6 text-primary"/>
          {course?.id ? "Edit Course" : "Add New Course"}
        </CardTitle>
        <UiCardDescription>
          {course?.id ? "Update the course details." : "Enter the details for the new course."}
        </UiCardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Course Name</FormLabel>
                  <FormControl><Input placeholder="E.g., Introduction to Programming" {...field} /></FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="code"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Course Code</FormLabel>
                  <FormControl><Input placeholder="E.g., CS101" {...field} /></FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description (Optional)</FormLabel>
                  <FormControl><Textarea placeholder="Provide a brief description of the course..." {...field} rows={5} /></FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* 
            // Placeholder for teacher selection - can be added later
            <FormField
              control={form.control}
              name="teacherId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Teacher (Optional)</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Assign a teacher" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      // Populate with actual teachers from Firestore
                      <SelectItem value="teacher1_uid">Dr. Smith</SelectItem>
                      <SelectItem value="teacher2_uid">Prof. Jones</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            */}
            <div className="flex justify-end gap-2 pt-4">
              <Button type="button" variant="outline" onClick={() => router.back()} disabled={isSubmitting}>
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {course?.id ? "Save Changes" : "Create Course"}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
